{"version":3,"sources":["quizzes.js","components/Question.js","components/Result.js","components/ProgressBar.js","components/MultipleChoiceQuiz.js","utils/shuffle.js","index.js"],"names":["quizzes","title","questions","text","correctAnswer","incorrectAnswers","Question","state","pick","correct","isGreenOrRed","props","currentQuestion","handleSelect","setState","moveToNextQuestion","nextQuestionHandler","this","shuffledAnswerChoices","className","animation","type","map","idx","key","onClick","React","Component","Result","id","score","totalNumOfQs","nextQuizHandler","ProgressBar","questionsLeft","numIncorrect","console","log","divStyle","display","gridTemplateColumns","style","role","aria-label","MultipleChoiceQuiz","currentQuiz","numOfQuestions","resultSummary","handleNextQuestion","answer","length","setTimeout","handleNextQuiz","arr","tempVal","randomIdx","currIdx","Math","floor","random","shuffleOrder","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ecbc116.chunk.js","sourcesContent":["export const quizzes = [\n  {\n    title: 'Basics of HTML',\n    questions: [\n      {\n        text: 'Which element is used for a top-level heading?',\n        correctAnswer: 'h1',\n        incorrectAnswers: ['div', 'h0', 'p'],\n      },\n      {\n        text: 'Which element is used for a page break?',\n        correctAnswer: 'br',\n        incorrectAnswers: ['div', 'break', 'p'],\n      },\n      {\n        text: 'Which markup makes a link?',\n        correctAnswer: \"<a href='/cats' />\",\n        incorrectAnswers: [\n          \"<href a='/cats' />\",\n          \"<a src='/cats' />\",\n          \"<link href='/cats' />\",\n        ],\n      },\n      {\n        text: 'Which markup correctly creates an image?',\n        correctAnswer: \"<img src='cat.jpg' />\",\n        incorrectAnswers: [\n          \"<src img='cat.jpg' />\",\n          '<img>cat.jpg</img>',\n          '<src>cat.jpg</img>',\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Basics of CSS',\n    questions: [\n      {\n        text: 'Which markup correctly assigns HTML element a CSS class?',\n        correctAnswer: \"<div class='cat'>hi</div>\",\n        incorrectAnswers: [\n          \"<div className='cat'>hi</div>\",\n          \"<div>hi</div className='cat'>\",\n          \"<div class='cat'>hi</div class='cat'>\",\n        ],\n      },\n      {\n        text:\n          'Which markup is CSS that sets all cat classes to have pink font?',\n        correctAnswer: '.cat { color: pink; }',\n        incorrectAnswers: ['cat { color: pink; }', '<cat> color: pink; </cat>'],\n      },\n      {\n        text:\n          'Which markup is CSS that sets all elements of id \"dog\" to be bold?',\n        correctAnswer: '#dog { font-weight: bold; }',\n        incorrectAnswers: ['dog { weight: bold; }', '.dog { font: bold; }'],\n      },\n    ],\n  },\n];\n","import React from 'react';\n\nimport '../styles.css';\n\nclass Question extends React.Component {\n  state = {\n    pick: false,\n    correct: false,\n  };\n\n  isGreenOrRed = pick => {\n    if (pick === this.state.pick) {\n      return this.state.correct ? 'correct' : 'incorrect';\n    } else if (\n      pick === !this.state.correct &&\n      this.props.currentQuestion.correctAnswer\n    ) {\n      return 'correct';\n    } else {\n      return 'clear';\n    }\n  };\n\n  handleSelect = pick => {\n    if (pick === this.props.currentQuestion.correctAnswer) {\n      this.setState({ pick, correct: true });\n    } else {\n      this.setState({ pick });\n    }\n  };\n\n  moveToNextQuestion = () => {\n    this.setState({ pick: false, correct: false });\n    this.props.nextQuestionHandler(this.state.correct);\n  };\n\n  render() {\n    const { currentQuestion, shuffledAnswerChoices } = this.props;\n\n    return (\n      <div className={this.props.animation ? this.props.animation : null}>\n        <p>{currentQuestion.text}</p>\n        <ol type=\"A\">\n          {shuffledAnswerChoices.map((pick, idx) => {\n            return (\n              <li\n                key={idx}\n                className={this.state.pick ? this.isGreenOrRed(pick) : null}\n                onClick={() => this.handleSelect(pick)}\n              >\n                {pick}\n              </li>\n            );\n          })}\n        </ol>\n        {this.state.pick && (\n          <div>\n            {this.state.correct ? (\n              <p>\n                <i>Correct!</i>\n              </p>\n            ) : (\n              <p>\n                <i>Incorrect...</i>\n              </p>\n            )}\n            <button className=\"next-btn\" onClick={this.moveToNextQuestion}>\n              Next\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React from 'react';\n\nconst Result = (props) => {\n  return (\n    <div id=\"result-summary\">\n      <p>\n        You got <strong>{props.score}</strong> out of{' '}\n        <strong>{props.totalNumOfQs}</strong> questions right\n      </p>\n      <button className=\"next-btn\" onClick={props.nextQuizHandler}>\n        Next Quiz\n      </button>\n    </div>\n  );\n};\n\nexport default Result;\n","import React from 'react';\n\nconst ProgressBar = props => {\n  const questionsLeft = props.totalNumOfQs - (props.score + props.numIncorrect);\n\n  console.log(props.score);\n\n  const divStyle = {\n    display: 'grid',\n    gridTemplateColumns: `${props.score}fr ${\n      props.numIncorrect\n    }fr ${questionsLeft}fr`,\n  };\n\n  return (\n    <div style={divStyle} className=\"progress-bar\">\n      <div className=\"green\">\n        {props.score ? (\n          <span role=\"img\" aria-label=\"check-mark-button-emoji\">\n            ‚úÖ\n          </span>\n        ) : null}\n      </div>\n      <div className=\"red\">\n        {props.numIncorrect ? (\n          <span role=\"img\" aria-label=\"slightly-frowning-face-emoji\">\n            üôÅ\n          </span>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React from 'react';\n\nimport { quizzes } from '../quizzes';\nimport { shuffleOrder } from '../utils/shuffle';\n\nimport '../styles.css';\n\nimport Question from './Question';\nimport Result from './Result';\nimport ProgressBar from './ProgressBar';\n\nclass MultipleChoiceQuiz extends React.Component {\n  state = {\n    currentQuiz: 0,\n    numOfQuestions: 0,\n    score: 0,\n    resultSummary: false,\n    animation: false,\n    numIncorrect: 0,\n  };\n\n  handleNextQuestion = answer => {\n    const { currentQuiz, numOfQuestions, score, numIncorrect } = this.state;\n\n    if (answer) {\n      this.setState({\n        score: score + 1,\n        numOfQuestions: numOfQuestions + 1,\n      });\n    } else {\n      this.setState({\n        numIncorrect: numIncorrect + 1,\n        numOfQuestions: numOfQuestions + 1,\n      });\n    }\n\n    if (numOfQuestions === quizzes[currentQuiz].questions.length - 1) {\n      this.setState({\n        numOfQuestions,\n        resultSummary: true,\n      });\n    }\n\n    // fix fix fix\n    // bundle -> variable and call setState()\n    if (!this.state.animation) {\n      this.setState({ animation: 'multiple-choices' });\n      setTimeout(() => {\n        this.setState({ animation: false });\n      }, 350);\n    } else {\n      this.setState({ animation: false });\n    }\n  };\n\n  handleNextQuiz = () => {\n    const { currentQuiz } = this.state;\n\n    if (currentQuiz + 1 === quizzes.length) {\n      // reset quiz to first quiz\n      this.setState({\n        resultSummary: false,\n        numOfQuestions: 0,\n        score: 0,\n        currentQuiz: 0,\n        numIncorrect: 0,\n      });\n    } else {\n      this.setState({\n        resultSummary: false,\n        numOfQuestions: 0,\n        score: 0,\n        currentQuiz: currentQuiz + 1,\n        numIncorrect: 0,\n      });\n    }\n  };\n\n  render() {\n    const {\n      currentQuiz,\n      numOfQuestions,\n      score,\n      resultSummary,\n      animation,\n      numIncorrect,\n    } = this.state;\n\n    const { title, questions } = quizzes[currentQuiz];\n    const currentQuestion = questions[numOfQuestions];\n\n    const shuffledAnswerChoices = shuffleOrder([\n      ...currentQuestion.incorrectAnswers,\n      currentQuestion.correctAnswer,\n    ]);\n\n    return (\n      <div className=\"container\">\n        <h1>{title}</h1>\n        {resultSummary ? (\n          <Result\n            score={score}\n            numOfQuestions={numOfQuestions}\n            nextQuizHandler={this.handleNextQuiz}\n            totalNumOfQs={questions.length}\n          />\n        ) : (\n          <Question\n            currentQuestion={currentQuestion}\n            shuffledAnswerChoices={shuffledAnswerChoices}\n            nextQuestionHandler={this.handleNextQuestion}\n            animation={animation}\n          />\n        )}\n        <ProgressBar\n          score={score}\n          numIncorrect={numIncorrect}\n          totalNumOfQs={questions.length}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MultipleChoiceQuiz;\n","export const shuffleOrder = arr => {\n  let currIdx = arr.length;\n  let tempVal, randomIdx;\n\n  while (0 !== currIdx) {\n    randomIdx = Math.floor(Math.random() * currIdx);\n    currIdx -= 1;\n\n    // swap with current element\n    tempVal = arr[currIdx];\n    arr[currIdx] = arr[randomIdx];\n    arr[randomIdx] = tempVal;\n  }\n\n  return arr;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport MultipleChoiceQuiz from './components/MultipleChoiceQuiz';\n\nimport { quizzes } from './quizzes';\nimport './styles.css';\n\nconsole.log('Here are the quizzes:', quizzes);\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <MultipleChoiceQuiz />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}